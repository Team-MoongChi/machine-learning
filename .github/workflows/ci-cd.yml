name: Deploy to EC2

on:
  push:
    branches: [ main, fix/ci-cd ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create .env file
      run: |
        echo "üìù Creating .env file..."
        echo "OPENSEARCH_USERNAME=${{ secrets.OPENSEARCH_USERNAME }}" >> .env
        echo "OPENSEARCH_HOST=${{ secrets.OPENSEARCH_HOST }}" >> .env
        echo "OPENSEARCH_PORT=${{ secrets.OPENSEARCH_PORT }}" >> .env
        echo "OPENSEARCH_PASSWORD=${{ secrets.OPENSEARCH_PASSWORD }}" >> .env
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/ml-api:latest
        cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/ml-api:latest
        cache-to: type=inline
        platforms: linux/amd64

    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        envs: DOCKERHUB_USERNAME
        script: |
          echo "üöÄ Starting deployment process..."
          
          echo "üîÑ Docker login and pull latest image..."
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
          docker pull $DOCKERHUB_USERNAME/ml-api:latest
          
          echo "üõë Stopping and removing existing containers..."
          docker stop ml-api || true
          docker rm ml-api || true
          
          echo "üßπ Cleaning up Docker system..."
          docker system prune -f
          
          echo "üìù Checking .env file..."
          if [ ! -f "/home/ubuntu/machine-learning/.env" ]; then
            echo "Creating .env file..."
            touch /home/ubuntu/machine-learning/.env
          fi
          
          echo "üèóÔ∏è Starting new container with logs..."
          docker run -d \
            --name ml-api \
            -p 8000:8000 \
            --restart unless-stopped \
            --env-file /home/ubuntu/machine-learning/.env \
            $DOCKERHUB_USERNAME/ml-api:latest
          
          echo "üìã Checking container status..."
          docker ps -a | grep ml-api
          docker logs ml-api